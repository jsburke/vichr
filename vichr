#!/usr/bin/env python3
#vichr information
#
#  vichr is an open source, terminal based
#  nes chr file editor lightly inspired by
#  vim.
#
#usage:
#
#  -h  --help                   Print this message
#  -v  --version                Print version of vichr
#
#  -t  --tiles  <file_name>     file containing background
#                (.chr)         or sprite tiles. Will be
#                               created if not found and zeroed
#

import os, sys, argparse, curses
import numpy as np

version = "0.01"

########################
##                    ##
## Command Line       ##
##                    ##
########################

class parser_with_error(argparse.ArgumentParser):
  def error(self, msg = ""):
    if(msg): print("ERROR: %s" % msg)
    this_file = open(sys.argv[0])
    for(line_num, line) in enumerate(this_file):
      if(line[0] != "#"): sys.exit(msg != "")
      if(line_num > 0):   print(line[1:].rstrip("\n"))

def parse():
  parser = parser_with_error(add_help = False)

  # add the args, not going to be strict

  parser.add_argument("-h", "--help",      action = "store_true")
  parser.add_argument("-v", "--version",   action = "store_true")
  parser.add_argument("-t", "--tiles",     type = str)

  options = parser.parse_args()

  if options.help:
    parser.error()
  elif options.version:
    print("vichr version: %s" % version)
    sys.exit()
  elif options.tiles:
    return options
  else:
    parser.error("No input")

########################
##                    ##
## Aux Functions      ##
##                    ##
########################

def tiles_read(filename):
  tiles = [] # blank out result

  if os.path.isfile(filename):
    tiles_np = np.reshape(np.fromfile(filename, dtype=np.uint8), (-1, 8))
  else: # drop 8k of zero since it's the mario chr size
    tiles_np = np.zeros((1024, 8), dtype=np.uint8, order='C')

  # generate bit planes
  [n_rows, n_cols] = tiles_np.shape

  # going to need a converstion to bit arrays...
  for row in range(0, n_rows, 2):
    bit_plane_1 = tiles_np[row]
    bit_plane_2 = tiles_np[row + 1]

  # get bit planes, convert to tiles
  # ta da

  return tiles

########################
##                    ##
## Main               ##
##                    ##
########################

def main():
  options = parse()

  tiles_file = options.tiles
  tiles      = tiles_read(tiles_file)

main()
